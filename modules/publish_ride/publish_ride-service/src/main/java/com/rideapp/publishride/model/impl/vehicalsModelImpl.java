/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rideapp.publishride.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.rideapp.publishride.model.vehicals;
import com.rideapp.publishride.model.vehicalsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the vehicals service. Represents a row in the &quot;Rideapp_vehicals&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>vehicalsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link vehicalsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see vehicalsImpl
 * @generated
 */
@JSON(strict = true)
public class vehicalsModelImpl
	extends BaseModelImpl<vehicals> implements vehicalsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vehicals model instance should use the <code>vehicals</code> interface instead.
	 */
	public static final String TABLE_NAME = "Rideapp_vehicals";

	public static final Object[][] TABLE_COLUMNS = {
		{"vehicalsId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"carModel", Types.VARCHAR},
		{"plateNumber", Types.VARCHAR}, {"capacity", Types.INTEGER},
		{"comfortLevel", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("vehicalsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("carModel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("plateNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("capacity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("comfortLevel", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Rideapp_vehicals (vehicalsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,carModel VARCHAR(75) null,plateNumber VARCHAR(75) null,capacity INTEGER,comfortLevel VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Rideapp_vehicals";

	public static final String ORDER_BY_JPQL =
		" ORDER BY vehicals.vehicalsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Rideapp_vehicals.vehicalsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long VEHICALSID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public vehicalsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _vehicalsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVehicalsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _vehicalsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return vehicals.class;
	}

	@Override
	public String getModelClassName() {
		return vehicals.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<vehicals, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<vehicals, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<vehicals, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((vehicals)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<vehicals, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<vehicals, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(vehicals)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<vehicals, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<vehicals, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<vehicals, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<vehicals, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<vehicals, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<vehicals, Object>>();
		Map<String, BiConsumer<vehicals, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<vehicals, ?>>();

		attributeGetterFunctions.put("vehicalsId", vehicals::getVehicalsId);
		attributeSetterBiConsumers.put(
			"vehicalsId", (BiConsumer<vehicals, Long>)vehicals::setVehicalsId);
		attributeGetterFunctions.put("groupId", vehicals::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<vehicals, Long>)vehicals::setGroupId);
		attributeGetterFunctions.put("companyId", vehicals::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<vehicals, Long>)vehicals::setCompanyId);
		attributeGetterFunctions.put("userId", vehicals::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<vehicals, Long>)vehicals::setUserId);
		attributeGetterFunctions.put("userName", vehicals::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<vehicals, String>)vehicals::setUserName);
		attributeGetterFunctions.put("createDate", vehicals::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<vehicals, Date>)vehicals::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", vehicals::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<vehicals, Date>)vehicals::setModifiedDate);
		attributeGetterFunctions.put("carModel", vehicals::getCarModel);
		attributeSetterBiConsumers.put(
			"carModel", (BiConsumer<vehicals, String>)vehicals::setCarModel);
		attributeGetterFunctions.put("plateNumber", vehicals::getPlateNumber);
		attributeSetterBiConsumers.put(
			"plateNumber",
			(BiConsumer<vehicals, String>)vehicals::setPlateNumber);
		attributeGetterFunctions.put("capacity", vehicals::getCapacity);
		attributeSetterBiConsumers.put(
			"capacity", (BiConsumer<vehicals, Integer>)vehicals::setCapacity);
		attributeGetterFunctions.put("comfortLevel", vehicals::getComfortLevel);
		attributeSetterBiConsumers.put(
			"comfortLevel",
			(BiConsumer<vehicals, String>)vehicals::setComfortLevel);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getVehicalsId() {
		return _vehicalsId;
	}

	@Override
	public void setVehicalsId(long vehicalsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicalsId = vehicalsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCarModel() {
		if (_carModel == null) {
			return "";
		}
		else {
			return _carModel;
		}
	}

	@Override
	public void setCarModel(String carModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carModel = carModel;
	}

	@JSON
	@Override
	public String getPlateNumber() {
		if (_plateNumber == null) {
			return "";
		}
		else {
			return _plateNumber;
		}
	}

	@Override
	public void setPlateNumber(String plateNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_plateNumber = plateNumber;
	}

	@JSON
	@Override
	public int getCapacity() {
		return _capacity;
	}

	@Override
	public void setCapacity(int capacity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_capacity = capacity;
	}

	@JSON
	@Override
	public String getComfortLevel() {
		if (_comfortLevel == null) {
			return "";
		}
		else {
			return _comfortLevel;
		}
	}

	@Override
	public void setComfortLevel(String comfortLevel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comfortLevel = comfortLevel;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), vehicals.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public vehicals toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, vehicals>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		vehicalsImpl vehicalsImpl = new vehicalsImpl();

		vehicalsImpl.setVehicalsId(getVehicalsId());
		vehicalsImpl.setGroupId(getGroupId());
		vehicalsImpl.setCompanyId(getCompanyId());
		vehicalsImpl.setUserId(getUserId());
		vehicalsImpl.setUserName(getUserName());
		vehicalsImpl.setCreateDate(getCreateDate());
		vehicalsImpl.setModifiedDate(getModifiedDate());
		vehicalsImpl.setCarModel(getCarModel());
		vehicalsImpl.setPlateNumber(getPlateNumber());
		vehicalsImpl.setCapacity(getCapacity());
		vehicalsImpl.setComfortLevel(getComfortLevel());

		vehicalsImpl.resetOriginalValues();

		return vehicalsImpl;
	}

	@Override
	public vehicals cloneWithOriginalValues() {
		vehicalsImpl vehicalsImpl = new vehicalsImpl();

		vehicalsImpl.setVehicalsId(
			this.<Long>getColumnOriginalValue("vehicalsId"));
		vehicalsImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		vehicalsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		vehicalsImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		vehicalsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		vehicalsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		vehicalsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		vehicalsImpl.setCarModel(
			this.<String>getColumnOriginalValue("carModel"));
		vehicalsImpl.setPlateNumber(
			this.<String>getColumnOriginalValue("plateNumber"));
		vehicalsImpl.setCapacity(
			this.<Integer>getColumnOriginalValue("capacity"));
		vehicalsImpl.setComfortLevel(
			this.<String>getColumnOriginalValue("comfortLevel"));

		return vehicalsImpl;
	}

	@Override
	public int compareTo(vehicals vehicals) {
		long primaryKey = vehicals.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof vehicals)) {
			return false;
		}

		vehicals vehicals = (vehicals)object;

		long primaryKey = vehicals.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<vehicals> toCacheModel() {
		vehicalsCacheModel vehicalsCacheModel = new vehicalsCacheModel();

		vehicalsCacheModel.vehicalsId = getVehicalsId();

		vehicalsCacheModel.groupId = getGroupId();

		vehicalsCacheModel.companyId = getCompanyId();

		vehicalsCacheModel.userId = getUserId();

		vehicalsCacheModel.userName = getUserName();

		String userName = vehicalsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			vehicalsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			vehicalsCacheModel.createDate = createDate.getTime();
		}
		else {
			vehicalsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			vehicalsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			vehicalsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		vehicalsCacheModel.carModel = getCarModel();

		String carModel = vehicalsCacheModel.carModel;

		if ((carModel != null) && (carModel.length() == 0)) {
			vehicalsCacheModel.carModel = null;
		}

		vehicalsCacheModel.plateNumber = getPlateNumber();

		String plateNumber = vehicalsCacheModel.plateNumber;

		if ((plateNumber != null) && (plateNumber.length() == 0)) {
			vehicalsCacheModel.plateNumber = null;
		}

		vehicalsCacheModel.capacity = getCapacity();

		vehicalsCacheModel.comfortLevel = getComfortLevel();

		String comfortLevel = vehicalsCacheModel.comfortLevel;

		if ((comfortLevel != null) && (comfortLevel.length() == 0)) {
			vehicalsCacheModel.comfortLevel = null;
		}

		return vehicalsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<vehicals, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<vehicals, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<vehicals, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((vehicals)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, vehicals>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					vehicals.class, ModelWrapper.class);

	}

	private long _vehicalsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _carModel;
	private String _plateNumber;
	private int _capacity;
	private String _comfortLevel;

	public <T> T getColumnValue(String columnName) {
		Function<vehicals, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((vehicals)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("vehicalsId", _vehicalsId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("carModel", _carModel);
		_columnOriginalValues.put("plateNumber", _plateNumber);
		_columnOriginalValues.put("capacity", _capacity);
		_columnOriginalValues.put("comfortLevel", _comfortLevel);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("vehicalsId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("carModel", 128L);

		columnBitmasks.put("plateNumber", 256L);

		columnBitmasks.put("capacity", 512L);

		columnBitmasks.put("comfortLevel", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private vehicals _escapedModel;

}