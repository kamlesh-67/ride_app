/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rideapp.publishride.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.rideapp.publishride.model.rides;
import com.rideapp.publishride.model.ridesModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the rides service. Represents a row in the &quot;Rideapp_rides&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ridesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ridesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ridesImpl
 * @generated
 */
@JSON(strict = true)
public class ridesModelImpl extends BaseModelImpl<rides> implements ridesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rides model instance should use the <code>rides</code> interface instead.
	 */
	public static final String TABLE_NAME = "Rideapp_rides";

	public static final Object[][] TABLE_COLUMNS = {
		{"ridesId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"leavingLocation", Types.VARCHAR},
		{"headingLocation", Types.VARCHAR}, {"arivalDate", Types.TIMESTAMP},
		{"availableSeats", Types.INTEGER}, {"comfortLevel", Types.VARCHAR},
		{"price", Types.FLOAT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ridesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("leavingLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("headingLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arivalDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("availableSeats", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("comfortLevel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("price", Types.FLOAT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Rideapp_rides (ridesId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,leavingLocation VARCHAR(75) null,headingLocation VARCHAR(75) null,arivalDate DATE null,availableSeats INTEGER,comfortLevel VARCHAR(75) null,price DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table Rideapp_rides";

	public static final String ORDER_BY_JPQL = " ORDER BY rides.ridesId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Rideapp_rides.ridesId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RIDESID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ridesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ridesId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRidesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ridesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return rides.class;
	}

	@Override
	public String getModelClassName() {
		return rides.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<rides, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<rides, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<rides, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((rides)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<rides, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<rides, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((rides)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<rides, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<rides, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<rides, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<rides, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<rides, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<rides, Object>>();
		Map<String, BiConsumer<rides, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<rides, ?>>();

		attributeGetterFunctions.put("ridesId", rides::getRidesId);
		attributeSetterBiConsumers.put(
			"ridesId", (BiConsumer<rides, Long>)rides::setRidesId);
		attributeGetterFunctions.put("groupId", rides::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<rides, Long>)rides::setGroupId);
		attributeGetterFunctions.put("companyId", rides::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<rides, Long>)rides::setCompanyId);
		attributeGetterFunctions.put("userId", rides::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<rides, Long>)rides::setUserId);
		attributeGetterFunctions.put("userName", rides::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<rides, String>)rides::setUserName);
		attributeGetterFunctions.put("createDate", rides::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<rides, Date>)rides::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", rides::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<rides, Date>)rides::setModifiedDate);
		attributeGetterFunctions.put(
			"leavingLocation", rides::getLeavingLocation);
		attributeSetterBiConsumers.put(
			"leavingLocation",
			(BiConsumer<rides, String>)rides::setLeavingLocation);
		attributeGetterFunctions.put(
			"headingLocation", rides::getHeadingLocation);
		attributeSetterBiConsumers.put(
			"headingLocation",
			(BiConsumer<rides, String>)rides::setHeadingLocation);
		attributeGetterFunctions.put("arivalDate", rides::getArivalDate);
		attributeSetterBiConsumers.put(
			"arivalDate", (BiConsumer<rides, Date>)rides::setArivalDate);
		attributeGetterFunctions.put(
			"availableSeats", rides::getAvailableSeats);
		attributeSetterBiConsumers.put(
			"availableSeats",
			(BiConsumer<rides, Integer>)rides::setAvailableSeats);
		attributeGetterFunctions.put("comfortLevel", rides::getComfortLevel);
		attributeSetterBiConsumers.put(
			"comfortLevel", (BiConsumer<rides, String>)rides::setComfortLevel);
		attributeGetterFunctions.put("price", rides::getPrice);
		attributeSetterBiConsumers.put(
			"price", (BiConsumer<rides, Float>)rides::setPrice);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getRidesId() {
		return _ridesId;
	}

	@Override
	public void setRidesId(long ridesId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ridesId = ridesId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLeavingLocation() {
		if (_leavingLocation == null) {
			return "";
		}
		else {
			return _leavingLocation;
		}
	}

	@Override
	public void setLeavingLocation(String leavingLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leavingLocation = leavingLocation;
	}

	@JSON
	@Override
	public String getHeadingLocation() {
		if (_headingLocation == null) {
			return "";
		}
		else {
			return _headingLocation;
		}
	}

	@Override
	public void setHeadingLocation(String headingLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_headingLocation = headingLocation;
	}

	@JSON
	@Override
	public Date getArivalDate() {
		return _arivalDate;
	}

	@Override
	public void setArivalDate(Date arivalDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_arivalDate = arivalDate;
	}

	@JSON
	@Override
	public int getAvailableSeats() {
		return _availableSeats;
	}

	@Override
	public void setAvailableSeats(int availableSeats) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_availableSeats = availableSeats;
	}

	@JSON
	@Override
	public String getComfortLevel() {
		if (_comfortLevel == null) {
			return "";
		}
		else {
			return _comfortLevel;
		}
	}

	@Override
	public void setComfortLevel(String comfortLevel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comfortLevel = comfortLevel;
	}

	@JSON
	@Override
	public float getPrice() {
		return _price;
	}

	@Override
	public void setPrice(float price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), rides.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public rides toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, rides>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ridesImpl ridesImpl = new ridesImpl();

		ridesImpl.setRidesId(getRidesId());
		ridesImpl.setGroupId(getGroupId());
		ridesImpl.setCompanyId(getCompanyId());
		ridesImpl.setUserId(getUserId());
		ridesImpl.setUserName(getUserName());
		ridesImpl.setCreateDate(getCreateDate());
		ridesImpl.setModifiedDate(getModifiedDate());
		ridesImpl.setLeavingLocation(getLeavingLocation());
		ridesImpl.setHeadingLocation(getHeadingLocation());
		ridesImpl.setArivalDate(getArivalDate());
		ridesImpl.setAvailableSeats(getAvailableSeats());
		ridesImpl.setComfortLevel(getComfortLevel());
		ridesImpl.setPrice(getPrice());

		ridesImpl.resetOriginalValues();

		return ridesImpl;
	}

	@Override
	public rides cloneWithOriginalValues() {
		ridesImpl ridesImpl = new ridesImpl();

		ridesImpl.setRidesId(this.<Long>getColumnOriginalValue("ridesId"));
		ridesImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		ridesImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		ridesImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		ridesImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
		ridesImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ridesImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		ridesImpl.setLeavingLocation(
			this.<String>getColumnOriginalValue("leavingLocation"));
		ridesImpl.setHeadingLocation(
			this.<String>getColumnOriginalValue("headingLocation"));
		ridesImpl.setArivalDate(
			this.<Date>getColumnOriginalValue("arivalDate"));
		ridesImpl.setAvailableSeats(
			this.<Integer>getColumnOriginalValue("availableSeats"));
		ridesImpl.setComfortLevel(
			this.<String>getColumnOriginalValue("comfortLevel"));
		ridesImpl.setPrice(this.<Float>getColumnOriginalValue("price"));

		return ridesImpl;
	}

	@Override
	public int compareTo(rides rides) {
		long primaryKey = rides.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof rides)) {
			return false;
		}

		rides rides = (rides)object;

		long primaryKey = rides.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<rides> toCacheModel() {
		ridesCacheModel ridesCacheModel = new ridesCacheModel();

		ridesCacheModel.ridesId = getRidesId();

		ridesCacheModel.groupId = getGroupId();

		ridesCacheModel.companyId = getCompanyId();

		ridesCacheModel.userId = getUserId();

		ridesCacheModel.userName = getUserName();

		String userName = ridesCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ridesCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ridesCacheModel.createDate = createDate.getTime();
		}
		else {
			ridesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ridesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ridesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ridesCacheModel.leavingLocation = getLeavingLocation();

		String leavingLocation = ridesCacheModel.leavingLocation;

		if ((leavingLocation != null) && (leavingLocation.length() == 0)) {
			ridesCacheModel.leavingLocation = null;
		}

		ridesCacheModel.headingLocation = getHeadingLocation();

		String headingLocation = ridesCacheModel.headingLocation;

		if ((headingLocation != null) && (headingLocation.length() == 0)) {
			ridesCacheModel.headingLocation = null;
		}

		Date arivalDate = getArivalDate();

		if (arivalDate != null) {
			ridesCacheModel.arivalDate = arivalDate.getTime();
		}
		else {
			ridesCacheModel.arivalDate = Long.MIN_VALUE;
		}

		ridesCacheModel.availableSeats = getAvailableSeats();

		ridesCacheModel.comfortLevel = getComfortLevel();

		String comfortLevel = ridesCacheModel.comfortLevel;

		if ((comfortLevel != null) && (comfortLevel.length() == 0)) {
			ridesCacheModel.comfortLevel = null;
		}

		ridesCacheModel.price = getPrice();

		return ridesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<rides, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<rides, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<rides, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((rides)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, rides>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					rides.class, ModelWrapper.class);

	}

	private long _ridesId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _leavingLocation;
	private String _headingLocation;
	private Date _arivalDate;
	private int _availableSeats;
	private String _comfortLevel;
	private float _price;

	public <T> T getColumnValue(String columnName) {
		Function<rides, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((rides)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("ridesId", _ridesId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("leavingLocation", _leavingLocation);
		_columnOriginalValues.put("headingLocation", _headingLocation);
		_columnOriginalValues.put("arivalDate", _arivalDate);
		_columnOriginalValues.put("availableSeats", _availableSeats);
		_columnOriginalValues.put("comfortLevel", _comfortLevel);
		_columnOriginalValues.put("price", _price);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("ridesId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("leavingLocation", 128L);

		columnBitmasks.put("headingLocation", 256L);

		columnBitmasks.put("arivalDate", 512L);

		columnBitmasks.put("availableSeats", 1024L);

		columnBitmasks.put("comfortLevel", 2048L);

		columnBitmasks.put("price", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private rides _escapedModel;

}